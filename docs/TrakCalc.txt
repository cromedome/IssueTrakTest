[1mNAME[0m
    Trak::Calc - implement a calculator/forumla parser and evaluator in Perl.

[1mDESCRIPTION[0m
    This implements a modified Shunting Yard Algorithm
    (<https://en.wikipedia.org/wiki/Shunting-yard_algorithm>). For the most
    part, we adhere to the process described, but Perl being a dynamic makes
    some implementation details a bit easier.

  [1mASSUMPTIONS/REQUIREMENTS[0m
    From the email explaining the test requirements, the calculator was
    designed to meet the following requirements:

    *   Operands [1mmust[0m be integers.

    *   Don't assume that operands, operators, and functions will be regularly
        spaced apart (this made parsing interesting!).

[1mHOW IT WORKS[0m
    "_evaluate()" is invoked with a single formula. The method iterates over
    that formula, calling "_pluck_token()" to pull the next token from the
    left side of the formula. The token is returned, and is either pushed on
    the number stack, the operator stack, or is evaluated as a function. When
    it runs out of tokens, "_evaluate()" starts popping operators and operands
    off their respective stacks and works its way to an eventual result.

    "_pluck_token()" actually does a fair amount of heavy lifting. Since there
    is no guarantee that tokens are evenly spaced (or spaced at all), some
    rather complicated regular expressions were needed to extract each type of
    token from the formula (rather than simply splitting the formula on any
    whitespace). When it identifies a token, it returns the token and its type
    (number, operator, or function) back to "_evaluate()". If it finds a
    parenthetical expression, it calls "_evaluate()" with the contents of that
    expression.

  [1mSUPPORTED OPERATORS[0m
    The following operators are supported:

    Addition (+)
    Subtraction (-)
    Multiplication (*)
        Multiplication also works implicitly: i.e., "5(4+1)" is evaluated to
        be 25, as is "(3+2)(4+1)".

    Division (/)
    Modulus (%)
    Exponentiation (^)
    Parenthesis ()

  [1mSUPPORTED FUNCTIONS[0m
    The following functions are also supported:

    Square Root - sqrt(x)
    Sine - sin(x)
    Cosine - cos(x)
    Tangent - tan(x)

  [1mWRITING YOU OWN OPERATORS AND FUNCTIONS[0m
    It's pretty easy to add your own operators. In the %ops hash, the
    character representing the operator must be provided, its order of
    precedence (higher values are evaluated first), a help description (which
    is shown by the "help()" method) and finally, an anonymous subroutine that
    takes two arguments and implements said operator.

    Functions work rather similarly. In the %functions hash, a function name
    must be provided, along with a help description, and finally, a
    single-argument anonymous function that implements that function.
    Currently, functions may only take a single argument, and contents in the
    argument are not evaluated as a mathematical expression.

[1mPUBLIC METHODS[0m
  [1mcalculate()[0m
    This is the public interface to the calculator. When it is called, it sets
    up the trace report, and invokes "_evaluate()" for the function provided.
    It takes a single argument: the function to be evaluated.

  [1mdebug()[0m
    When called with no arguments, returns a boolean that indicates whether or
    not debugging is enabled. When passed a boolean argument, enables or
    disables debugging.

  [1mhelp()[0m
    Returns an auto-generated help page showing the supported list of
    operators and functions. Takes no arguments.

[1mPRIVATE METHODS[0m
  [1m_evaluate()[0m
    This is the brain of the calculator, and does the actual work of
    calculation. Takes a single argument: the function to be evaluated.
    Returns the result of the evaluation.

  [1m_log()[0m
    A convenience method to send a message to "STDERR". Takes a single
    argument: the message to be logged. If we are not in debugging mode, this
    method does nothing.

  [1m_pluck_token()[0m
    When given a formula, plucks the next token off the left side of it.
    Plucking is a destructive operation, and as such, the formula must be
    passed by reference. Returns a list that contains the token, the type of
    the token (NUM, OP, or FUNC), and in the case of a function, an optional
    argument item.

[1mAUTHOR[0m
    Jason A. Crome " jason@crome-plated.com "

